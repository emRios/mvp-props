# FRONTEND BUILD SPEC (mvp-props / frontend)

## Objetivo
Generar un **frontend Vue 3 + Vite** minimalista (KISS), siguiendo **Clean Architecture** con énfasis en **SRP y OCP**, que consuma el backend local y cumpla los NFRs básicos (latencia, validación en cliente, UX fluida).

## Reglas globales
- **No hacer preguntas** ni pedir confirmaciones. Crear y/o sobrescribir archivos indicados aquí.
- **Sin dependencias extra** (nada de ESLint/Prettier/Tailwind/State managers).
- **Versiones fijas** en `package.json`.
- **SRP/OCP**: separar vista, componentes y capa de datos (api.js).
- **KISS**: código corto, legible y sin configuraciones innecesarias.

## Variables / Configuración
- Base del backend: `VITE_API_BASE=http://localhost:5000`
- API Key para rutas protegidas: `VITE_BACK_API_KEY=demo-key`
- Crear `.env.example` con esas variables.

## Endpoints que se consumirán
- `GET /properties` → catálogo (público)
- `POST /interactions` → crear interacción + respuesta (protegido con API Key)
- `GET /interactions?userId=...` → listar interacciones (protegido)
- `GET /metrics/interactions` → métricas básicas (protegido)

## NFRs a cumplir (frontend)
1) **Usabilidad / Performance**
   - `AbortController` con **timeout 5s** en `api.js`.
   - **Debounce 250ms** para búsqueda.
   - **Lazy-loading** de imágenes.
   - Skeleton opcional (si hay tiempo).
2) **Seguridad (cliente)**
   - Enviar **Authorization: Bearer <VITE_BACK_API_KEY>** **solo** en `/interactions` y `/metrics`.
   - No guardar llaves reales; solo usar `.env`.
3) **KISS + SRP/OCP**
   - `api.js` encapsula fetch/timeout/headers.
   - Componentes presentacionales sin lógica de datos.

## UX / Layout (referencias)
- **Landing tipo “hero + grid”** (similar a Property-Listings).
- **Detalle con carrusel** y panel lateral (similar a PropiedadesMéxico).
- **Interacciones**: listado simple de preguntas/respuestas.
- **Métricas**: 3 tarjetas (pendiente, respondida, cancelada) + total.

## Estructura de archivos a generar (exacta)
frontend/
├─ package.json
├─ index.html
├─ vite.config.js
├─ .env.example
├─ public/
│ └─ favicon.svg
└─ src/
├─ main.js
├─ router.js
├─ api.js
├─ style.css
├─ utils/
│ └─ debounce.js
├─ components/
│ ├─ HeroSearch.vue
│ ├─ PropertyCard.vue
│ └─ ImageCarousel.vue
└─ views/
├─ Home.vue
├─ Detail.vue
├─ Interactions.vue
└─ Metrics.vue


## Requisitos por archivo (resumen)
- **package.json**
  - `"private": true`, `"type":"module"`
  - deps: `"vue": "3.5.12"`, `"vue-router": "4.4.5"`
  - devDeps: `"vite": "5.4.8"`, `"@vitejs/plugin-vue": "5.1.4"`
  - scripts: `"dev"`, `"build"`, `"preview"`
- **vite.config.js**: plugin vue, puerto 5173
- **.env.example**: `VITE_API_BASE`, `VITE_BACK_API_KEY`
- **api.js**
  - Función `j(url, opts, ms=5000)` con `AbortController`.
  - Agregar header `Authorization: Bearer <VITE_BACK_API_KEY>` **solo** si la URL incluye `/interactions` o `/metrics`.
  - Exponer `api.getProperties`, `api.postInteraction`, `api.getInteractions`, `api.getMetrics`.
- **components**
  - `HeroSearch.vue`: inputs para ubicación, tipo, precio máx., botón “Buscar”.
  - `PropertyCard.vue`: imagen (fallback), precio, m2, hab/baños, tipo, ubicación, link a detalle.
  - `ImageCarousel.vue`: sin dependencias, flechas, dots, swipe, lazy load, accesible (←/→).
- **views**
  - `Home.vue`: usa `HeroSearch` y `PropertyCard`, filtra en cliente (texto, tipo, precio).
  - `Detail.vue`: muestra `ImageCarousel`, ficha técnica, CTA WhatsApp, formulario “Preguntar” (POST `/interactions`), resultado visible.
  - `Interactions.vue`: lista de interacciones del usuario `u-demo`.
  - `Metrics.vue`: tarjetas con conteos (pendiente, respondida, cancelada, total).
- **style.css**: tema oscuro simple con variables CSS (—bg, —card, —muted, —text, —accent, —border).

## Datos (mapeo esperado)
- `imagenes` viene como arreglo de `{ tipo, url, formato }`. Usar `url`.
- Campos con tilde: `["baños"]`. Usar `x["baños"] ?? x.banos`.
- Área: `m2construccion ?? area`.

## Comandos a ejecutar tras generar
npm i
cp .env.example .env
npm run dev